import {
  Channel,
  ChannelType,
  ChatInputCommandInteraction,
  EmbedBuilder,
  GuildChannel,
  PermissionFlagsBits,
  PermissionsBitField,
  StringSelectMenuOptionBuilder,
  TextChannel,
} from "discord.js";
import { CustomClient } from "structures/CustomClient";
import { BaseCommand } from "structures/BaseCommand";
import {
  ActionRowBuilder,
  SelectMenuBuilder,
  SlashCommandBuilder,
  StringSelectMenuBuilder,
} from "@discordjs/builders";
import {
  getOrFetchChannelById,
  sendErrorEmbedWithCountdown,
  sendValidEmbedWithCountdown,
} from "utils/MessageUtils";

export class AutoRoleSetup extends BaseCommand {
  public constructor(client: CustomClient) {
    super(client, {
      data: new SlashCommandBuilder()
        .setName("autorole-setup")
        .setDescription("Configurer un autorole.")
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)
        .addStringOption((option) =>
          option
            .setName("autorole")
            .setDescription("l'autorole √† configurer")
            .setRequired(true)
            .addChoices(
              { name: "Secteur d'activit√© (LZCorp)", value: "secteur" },
              {
                name: "Disponibilit√© prestataire (NewsMC)",
                value: "prestataire_dispo",
              },
              { name: "Global (NewsMC)", value: "global" },
              { name: "Booster (NewsMC)", value: "booster" },
            ),
        ),
    });
  }

  public async execute(
    interaction: ChatInputCommandInteraction,
  ): Promise<void> {
    const channelId = interaction.channel?.id;

    if (!channelId) {
      await sendErrorEmbedWithCountdown(interaction, [
        "Impossible de r√©cup√©rer l'ID du salon.",
      ]);
      return;
    }

    if (!interaction.guild) {
      await sendErrorEmbedWithCountdown(interaction, [
        "Impossible de r√©cup√©rer le serveur.",
      ]);
      return;
    }

    const channel = await getOrFetchChannelById(interaction.guild, channelId);

    if (!channel) {
      await sendErrorEmbedWithCountdown(interaction, [
        "Impossible de r√©cup√©rer le salon.",
      ]);
      return;
    }

    if (channel.type !== ChannelType.GuildText) {
      await sendErrorEmbedWithCountdown(interaction, [
        "Le salon n'est pas un salon de serveur.",
      ]);
      return;
    }

    const choice = interaction.options.getString("autorole", true);

    switch (choice) {
      case "secteur":
        await this.setupServerType(interaction, channel);
        break;
      case "prestataire_dispo":
        await this.setupPrestataireDispo(interaction, channel);
        break;
      case "global":
        await this.setupGlobal(interaction, channel);
        break;
      case "booster":
        await this.setupBooster(interaction, channel);
        break;
      default:
        await sendErrorEmbedWithCountdown(interaction, ["Choix invalide."]);
    }
  }

  private async setupServerType(
    interaction: ChatInputCommandInteraction,
    channel: TextChannel,
  ) {
    const embed = new EmbedBuilder()
      .setTitle("üîé | Secteur d'activit√©")
      .setDescription("> Veuillez choisir votre secteur d'activit√©")
      .setThumbnail(
        "https://cdn.discordapp.com/attachments/772050282057957376/1286355490506412146/lzcorp-icon.jpg?ex=66ed9b68&is=66ec49e8&hm=efdd046218743a99e208e096195cc2b1e227b87f39bb477a9ab5728e77f9c8fd&",
      )
      .setFooter({
        text: "¬© Copyright LZCorp | NewsMC",
        iconURL: interaction.client.user.displayAvatarURL(),
      })
      .setColor("#87CEFA");

    const select = new StringSelectMenuBuilder()
      .setCustomId("secteur_activite")
      .setPlaceholder("S√©lectionnez votre secteur d'activit√©")
      .addOptions(
        new StringSelectMenuOptionBuilder()
          .setLabel("Faction")
          .setValue("faction")
          .setEmoji("‚öîÔ∏è"),
        new StringSelectMenuOptionBuilder()
          .setLabel("SkyBlock")
          .setValue("skyblock")
          .setEmoji("üåç"),
        new StringSelectMenuOptionBuilder()
          .setLabel("Survie")
          .setValue("survie")
          .setEmoji("üå≥"),
        new StringSelectMenuOptionBuilder()
          .setLabel("UHC / Autres")
          .setValue("uhc")
          .setEmoji("üéÆ"),
      );

    const row = new ActionRowBuilder<SelectMenuBuilder>().addComponents(select);

    await channel.send({ embeds: [embed], components: [row] });
    await sendValidEmbedWithCountdown(interaction, [
      "L'autorole a √©t√© configur√©.",
    ]);
  }

  private async setupPrestataireDispo(
    interaction: ChatInputCommandInteraction,
    channel: TextChannel,
  ) {
    const embed = new EmbedBuilder()
      .setTitle("üîé | Statut des prestataires")
      .setDescription(
        "> S√©lectionnez votre disponibilit√© √† l'aide du menu d√©roulant ci-dessous.",
      )
      .setColor("#87CEFA")
      .setFooter({
        text: "¬© Copyright LZCorp | NewsMC",
        iconURL: interaction.client.user.displayAvatarURL(),
      });

    const select = new StringSelectMenuBuilder()
      .setCustomId("prestataire_dispo")
      .setPlaceholder("S√©lectionnez votre disponibilit√©")
      .addOptions(
        new StringSelectMenuOptionBuilder()
          .setLabel("Disponible")
          .setValue("prestataire_disponible")
          .setEmoji("‚úÖ"),
        new StringSelectMenuOptionBuilder()
          .setLabel("Indisponible")
          .setValue("prestataire_indisponible")
          .setEmoji("‚ùå"),
      );

    const row = new ActionRowBuilder<SelectMenuBuilder>().addComponents(select);

    await channel.send({ embeds: [embed], components: [row] });
    await sendValidEmbedWithCountdown(interaction, [
      "L'autorole a √©t√© configur√©.",
    ]);
  }

  private async setupGlobal(
    interaction: ChatInputCommandInteraction,
    channel: TextChannel,
  ) {
    const embed = new EmbedBuilder()
      .setTitle("üîé | Choisissez les r√¥les que vous d√©sirez")
      .setColor("#87CEFA")
      .setFooter({
        text: "¬© Copyright LZCorp | NewsMC",
        iconURL: interaction.client.user.displayAvatarURL(),
      });

    const select = new StringSelectMenuBuilder()
      .setCustomId("global")
      .setPlaceholder("S√©lectionnez vos r√¥les")
      .addOptions(
        new StringSelectMenuOptionBuilder()
          .setLabel("Homme")
          .setValue("homme")
          .setEmoji("üöπ"),
        new StringSelectMenuOptionBuilder()
          .setLabel("Femme")
          .setValue("femme")
          .setEmoji("üö∫"),

        new StringSelectMenuOptionBuilder()
          .setLabel("Majeur")
          .setValue("majeur")
          .setEmoji("üßë"),
        new StringSelectMenuOptionBuilder()
          .setLabel("Mineur")
          .setValue("mineur")
          .setEmoji("üßí"),
        new StringSelectMenuOptionBuilder()
          .setLabel("Notifications Annonces")
          .setValue("notif_annonce")
          .setEmoji("üîî"),
        new StringSelectMenuOptionBuilder()
          .setLabel("Notifications Giveaways")
          .setValue("notif_giveaway")
          .setEmoji("üéâ"),
        new StringSelectMenuOptionBuilder()
          .setLabel("Notifications Events")
          .setValue("notif_event")
          .setEmoji("üéà"),
        new StringSelectMenuOptionBuilder()
          .setLabel("Joueur minecraft java")
          .setValue("java")
          .setEmoji("‚òï"),
        new StringSelectMenuOptionBuilder()
          .setLabel("Joueur minecraft bedrock")
          .setValue("bedrock")
          .setEmoji("ü™®"),
      );

    const row = new ActionRowBuilder<SelectMenuBuilder>().addComponents(select);

    await channel.send({ embeds: [embed], components: [row] });
    await sendValidEmbedWithCountdown(interaction, [
      "L'autorole a √©t√© configur√©.",
    ]);
  }

  private async setupBooster(
    interaction: ChatInputCommandInteraction,
    channel: TextChannel,
  ) {
    const embed = new EmbedBuilder()
      .setTitle("üîé | R√¥le Boosters")
      .setDescription(
        "> S√©lectionnez votre r√¥le customis√© obtenu gr√¢ce √† votre boost.",
      )
      .setColor("#87CEFA")
      .setFooter({
        text: "¬© Copyright LZCorp | NewsMC",
        iconURL: interaction.client.user.displayAvatarURL(),
      });

    const select = new StringSelectMenuBuilder()
      .setCustomId("booster")
      .setPlaceholder("S√©lectionnez vos r√¥les")
      .addOptions(
        new StringSelectMenuOptionBuilder()
          .setLabel("Baron du D√©v")
          .setValue("baron_dev")
          .setEmoji("üëë"),
        new StringSelectMenuOptionBuilder()
          .setLabel("Cr√©ateur de R√™ves")
          .setValue("createur_reve")
          .setEmoji("üåü"),
        new StringSelectMenuOptionBuilder()
          .setLabel("Ma√Ætre Batisseur")
          .setValue("maitre_batisseur")
          .setEmoji("üèóÔ∏è"),
        new StringSelectMenuOptionBuilder()
          .setLabel("R√™veur Romantique")
          .setValue("reveur_romantique")
          .setEmoji("üíñ"),
        new StringSelectMenuOptionBuilder()
          .setLabel("Daron des canap√©s")
          .setValue("daron_canape")
          .setEmoji("üõãÔ∏è"),
        new StringSelectMenuOptionBuilder()
          .setLabel("Amateurde Cocktails")
          .setValue("amateur_cocktails")
          .setEmoji("üçπ"),
        new StringSelectMenuOptionBuilder()
          .setLabel("Sensei")
          .setValue("sensei")
          .setEmoji("ü•ã"),
        new StringSelectMenuOptionBuilder()
          .setLabel("Modo Discord")
          .setValue("modo_discord")
          .setEmoji("üõ°Ô∏è"),
      );

    const row = new ActionRowBuilder<SelectMenuBuilder>().addComponents(select);

    await channel.send({ embeds: [embed], components: [row] });
    await sendValidEmbedWithCountdown(interaction, [
      "L'autorole a √©t√© configur√©.",
    ]);
  }
}
